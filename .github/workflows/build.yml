name: Build Workflow

on:
  push:
#    branches: master

jobs:
  build-windows:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.11'
          architecture: 'x64'
      - name: Install requirements
        run: |
          pip install -r requirements.txt
          pip install pyinstaller
      - name: Run PyInstaller
        run: |
          python -m PyInstaller nus3express.spec
      - uses: actions/upload-artifact@v2
        with:
          name: windows_nus3express
          path: dist/nus3express.exe

      - name: Fetch latest release
        id: latest_release
        run: |
          LATEST_RELEASE_TAG=$(curl --silent "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest" | jq -r .tag_name)
          echo "::set-output name=tag::${LATEST_RELEASE_TAG}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Increment version
        id: increment_version
        run: |
          LATEST_RELEASE_TAG=${{ steps.latest_release.outputs.tag }}
          VERSION_NUM=${LATEST_RELEASE_TAG#v}  # remove the 'v' prefix
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION_NUM"  # split into array
          ((VERSION_PARTS[2]++))  # increment the patch version
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.${VERSION_PARTS[2]}"
          echo "::set-output name=version::v${NEW_VERSION}"

      - name: create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.increment_version.outputs.version }}
          release_name: Release ${{ steps.increment_version.outputs.version }}
          body: |
            Test Release ${{ steps.increment_version.outputs.version }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: dist/nus3express.exe
          asset_name: nus3express.exe
          asset_content_type: application/zip