name: Build Workflow

on:
  push:
#    branches: master

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.11'
          architecture: 'x64'
      - name: Install requirements
        run: |
          pip install -r requirements.txt
          pip install pyinstaller
      - name: Run PyInstaller
        run: |
          python -m PyInstaller nus3express.spec
      - uses: actions/upload-artifact@v2
        with:
          name: windows_nus3express
          path: dist/nus3express.exe
      - name: Install curl and jq
        run: |
          choco install curl jq -y
      - name: Increment version
        id: increment_version
        run: |
          LATEST_RELEASE_TAG=$(curl --silent "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest" | jq -r .tag_name)
          VERSION_NUM=${LATEST_RELEASE_TAG#v}  # remove the 'v' prefix
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION_NUM"  # split into array

          # Check if patch version exists, if not add it
          if [ ${#VERSION_PARTS[@]} -eq 2 ]; then
            VERSION_PARTS+=('0')
          fi

          # Increment the patch version
          VERSION_PARTS[2]=$((VERSION_PARTS[2] + 1))

          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.${VERSION_PARTS[2]}"
          echo "version=v${NEW_VERSION}" >> $GITHUB_ENV
        shell: bash
      - name: create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.version }}
          release_name: Release ${{ env.version }}
          body: |
            Test Release ${{ env.version }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: dist/nus3express.exe
          asset_name: nus3express.exe
          asset_content_type: application/octet-stream